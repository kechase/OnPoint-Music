### This script is used to download files from your database to a csv file. 
import os
import csv
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Enter security key generated by firebase into the credentials.Certificate (or for higher security, follow recommendation below)
cred = credentials.Certificate("/Users/katie/Documents/workspace/z-Security-Keys/onpoint-music-security-key.json")

## Recommendation: in your home directory utilize a file such as .zprofile to store the environment variable that links to your security key. That way a physical link doesn't have to be entered and is less likely to break. This is how the code above is currently structured, to reference the env variable. Instructions on how to do that here: (https://firebase.google.com/docs/admin/setup/#initialize_the_sdk_in_non-google_environments) 

firebase_admin.initialize_app(cred)

db = firestore.client()

# List all collections 
print("Top-level collections:")
collections = db.collections()
for collection in collections:
    print(f"- {collection.id}")
    
    # Get a few documents from each collection
    docs = collection.limit(3).get()
    for doc in docs:
        print(f"  - Document ID: {doc.id}")
        print(f"    Data: {doc.to_dict()}")
        
# Helper function for reading subject data from database
def subjcsvread(subjects, csvFileName, db, collection):
    # Parameter validation
    if not subjects:
        print("Warning: Empty subjects list provided. No data will be retrieved.")
        return []
    
    if not collection:
        print("Error: No collection specified.")
        return []
        
    if not db:
        print("Error: Database client not provided.")
        return []
    
    subjectList = []
    for subj in subjects:

        try:
            docs = db.collection(collection).where(u'id', u'==', subj).stream()
            doc_found = False
            for doc in docs:
                doc_found = True
                fields = doc.to_dict()
                info = (fields.get('id'), 
                        fields.get('age'), 
                        fields.get('comments'), 
                        fields.get('handedness'), 
                        fields.get('ethnicity'), 
                        fields.get('mousetype'), 
                        fields.get('race'), 
                        fields.get('returner'), 
                        fields.get('sex'), 
                        fields.get('tgt_file'))
                subjectList.append(info)
            if not doc_found:
                print(f"Warning: No documents found for subject {subj} in collection '{collection}'")
        except firestore.exceptions.NotFound as e:
            print(f"Collection not found error for subject '{subj}': {e}")
        except firestore.exceptions.InvalidArgument as e:
            print(f"Invalid query argument for subject '{subj}': {e}")
        except Exception as e:
            print(f"Unexpected error processing subject '{subj}': {str(e)}")
            continue

    return subjectList


def getSubjectData(subjects, csvFileName, db, collection):
    subjectList = subjcsvread(subjects, csvFileName, db, collection)

    #Set up file to write to
    file = open(csvFileName, 'w')
    writer = csv.writer(file)
    header = ('Subject ID', 'Age', 'Comments', 'Handedness', 'Ethnicity', 'Mouse Type', 'Race', 'Returner', 'Sex', 'Target File')
    writer.writerow(header)
    writer.writerows(subjectList)
    file.close()

def addSubjectData(subjects, csvFileName, db, collection):
    subjectList = subjcsvread(subjects, csvFileName, db, collection)

    #Set up file to write to
    file = open(csvFileName, 'a')
    writer = csv.writer(file)
    writer.writerows(subjectList)
    file.close()
 
# Helper function for reading trial data from database
def trialcsvread(collection, numTrials, csvFileName, subjects, db):   
    import json
    
    trials = []
    
    # Parameter validation
    if not subjects:
        print("Warning: Empty subjects list provided. No data will be retrieved.")
        return trials
        
    if not collection:
        print("Error: No collection specified.")
        return trials
    
    for trialID in subjects:
        try:
            # First try to find documents by 'id' field
            docs = list(db.collection(collection).where(u'id', u'==', trialID).stream())
            
            # If no documents found, try using the document ID directly
            if not docs:
                doc_ref = db.collection(collection).document(trialID)
                doc = doc_ref.get()
                if doc.exists:
                    docs = [doc]
            
            if not docs:
                print(f"Warning: No documents found for subject '{trialID}' in collection '{collection}'")
                continue
                
            for doc in docs:
                fields = doc.to_dict()
                print(f"Processing trial data for: {trialID}, doc ID: {doc.id}")
                
                # Check if data uses flattened hand path format
                is_flattened = fields.get('hand_path_flattened', False)
                print(f"Hand path flattened: {is_flattened}")
                
                # Check if required arrays exist
                required_arrays = ['currentDate', 'trialNum', 'target_angle', 'trial_type', 
                                  'rotation', 'hand_fb_angle', 'rt', 'mt', 'search_time', 'reach_feedback']
                
                missing = [field for field in required_arrays if field not in fields or not fields.get(field)]
                if missing:
                    print(f"Warning: Missing required fields for {trialID}: {missing}")
                    continue
                
                # Get basic fields
                exp_ID = fields.get('experimentID', 'Unknown')
                name = fields.get('id', doc.id)  # Use doc ID as fallback
                group = fields.get('group_type', 'Unknown')
                
                # Get array fields with safe fallbacks
                currDate_arr = fields.get('currentDate', [])
                trialnum_arr = fields.get('trialNum', [])
                tgtAng_arr = fields.get('target_angle', [])
                trialType_arr = fields.get('trial_type', [])
                rot_arr = fields.get('rotation', [])
                handang_arr = fields.get('hand_fb_angle', [])
                rt_arr = fields.get('rt', [])
                mt_arr = fields.get('mt', [])
                search_arr = fields.get('search_time', [])
                reachfb_arr = fields.get('reach_feedback', [])
                
                # Optional fields - may not exist in all documents
                start_x = fields.get('start_x', [None] * len(currDate_arr))
                start_y = fields.get('start_y', [None] * len(currDate_arr))
                screen_height = fields.get('screen_height', [None] * len(currDate_arr))
                screen_width = fields.get('screen_width', [None] * len(currDate_arr))
                
                # Handle the hand path data
                hand_path_by_trial = {}
                
                if is_flattened:
                    # Extract hand_path related fields in flattened format
                    for key, value in fields.items():
                        if key.startswith('trial_') and ('_count' in key or '_first_' in key or '_last_' in key or '_sample_' in key):
                            parts = key.split('_')
                            if len(parts) >= 2 and parts[1].isdigit():
                                trial_num = int(parts[1])
                                
                                if trial_num not in hand_path_by_trial:
                                    hand_path_by_trial[trial_num] = {}
                                
                                field_name = '_'.join(parts[2:]) if len(parts) > 2 else 'unknown'
                                hand_path_by_trial[trial_num][field_name] = value
                    
                    # Add better debug information
                    print(f"Found {len(hand_path_by_trial)} trials with hand path data")
                    for trial_num, data in list(hand_path_by_trial.items())[:3]:  # Show first 3 for brevity
                        print(f"  Trial {trial_num}: {len(data)} data points")
                    
                    # Check data format consistency
                    for trial_num, data in hand_path_by_trial.items():
                        expected = ['count', 'first_x', 'first_y', 'first_time', 'last_x', 'last_y', 'last_time']
                        missing = [f for f in expected if f not in data]
                        if missing:
                            print(f"Warning: Trial {trial_num} missing expected fields: {missing}")
                else:
                    # Handle legacy format if needed
                    print("Warning: Hand path data is not in flattened format")
                    # Leave hand_path_by_trial empty or implement legacy handling if needed
                
                # Make sure all arrays are the same length
                min_len = min(len(currDate_arr), len(trialnum_arr), len(tgtAng_arr), 
                             len(trialType_arr), len(rot_arr), len(handang_arr), 
                             len(rt_arr), len(mt_arr), len(search_arr), len(reachfb_arr))
                
                for i in range(min_len):
                    # Get the trial number from trialnum_arr if available
                    trial_num = trialnum_arr[i] if i < len(trialnum_arr) else i + 1
                    
                    # Get hand path data for this trial with improved error handling
                    hand_path_data = hand_path_by_trial.get(trial_num, {})
                    
                    # Convert hand path data to JSON string
                    hand_path_json = ""
                    if hand_path_data:
                        try:
                            hand_path_json = json.dumps(hand_path_data)
                        except Exception as e:
                            print(f"Error converting hand path data to JSON for trial {trial_num}: {str(e)}")
                    
                    # Create safe array access with defaults for optional fields
                    start_x_val = start_x[i] if i < len(start_x) else None
                    start_y_val = start_y[i] if i < len(start_y) else None
                    screen_height_val = screen_height[i] if i < len(screen_height) else None
                    screen_width_val = screen_width[i] if i < len(screen_width) else None
                    
                    # Store trial data with the JSON string for hand path
                    trial = (exp_ID, name, currDate_arr[i], trialnum_arr[i], 
                            tgtAng_arr[i], trialType_arr[i], rot_arr[i], 
                            handang_arr[i], rt_arr[i], mt_arr[i], search_arr[i], 
                            reachfb_arr[i], hand_path_json, start_x_val, start_y_val, 
                            screen_height_val, screen_width_val, group)
                    trials.append(trial)
                
                print(f"Added {min_len} trials for {trialID}")
                
        except firestore.exceptions.NotFound as e:
            print(f"Collection not found error for subject '{trialID}': {e}")
        except firestore.exceptions.InvalidArgument as e:
            print(f"Invalid query argument for subject '{trialID}': {e}")
        except Exception as e:
            print(f"Error processing {trialID}: {str(e)}")
            continue
    
    print(f"Total trials collected: {len(trials)}")
    return trials
    
    
def getTrialData(collection, numTrials, csvFileName, subjects, db):
   # Parameter validation
    if not collection:
        print("Error: No collection specified.")
        return
        
    if not subjects:
        print("Warning: Empty subjects list provided. No data will be retrieved.")
        return
        
    if not csvFileName:
        print("Error: No output file specified.")
        return
        
    if not db:
        print("Error: Database client not provided.")
        return
        
    if numTrials <= 0:
        print(f"Warning: Invalid number of trials ({numTrials}). Using default limit.")
        numTrials = 100  # Set a sensible default

    trials = trialcsvread(collection, numTrials, csvFileName, subjects, db)
    
    #Set up file to write to
    file = open(csvFileName, 'w')
    writer = csv.writer(file)
    header = ('Experiment Name', 'Subject ID', 'Start Time', 'Trial Number', 'Target Angle', 'Cursor FB', 
    'Rotation', 'Hand Angle', 'RT', 'MT', 'Search Time', 'Reach FB', 'Hand_Path', 'Start_X', 'Start_Y', 'Screen_Height', 'Screen_Width', 'Group')
    writer.writerow(header)
    writer.writerows(trials)
    file.close()

def addTrialData(collection, numTrials, csvFileName, subjects, db):
    
    trials = trialcsvread(collection, numTrials, csvFileName, subjects, db)
    
    #Set up file to write to
    file = open(csvFileName, 'a')
    writer = csv.writer(file)
    emptyrow = []
    
    #writer.writerow(emptyrow)
    writer.writerows(trials)
    file.close()


### IMPORTANT NOTE: Depending on what field you choose to access the database, you may have to edit the functions slightly.
    ### Refer to comments in the functions themselves to make changes

### Select one of the following methods:
    ### "get" indicates you are starting a new csv 
    ### "add" indicates you are adding to an existing csv

### Update subjects to be the proper parameter you select to choose from firebase
### Subject data is the information subjects provide about themselves and trialData is trials
#subjects = ['1', '23', '123', 'Eli', 'sunday', 'testing', 'testing again'] # **TODO** Fill in subjects list with an appropriate field saved in the database

#getSubjectData(subjects, 'your pathway to subject_csv_name.csv', db, 'Subjects')
#getSubjectData(subjects, '/Users/katie/Documents/workspace/OnPoint-Music/Data/all_subjects.csv', db, 'Subjects')

#addSubjectData(subjects, 'your_csv_name.csv', db, 'Subjects')
#addSubjectData(subjects, '/Users/katie/Documents/workspace/OnPoint-Music/Data/sunday_subjectdata.csv', db, 'Subjects')


# **TODO** Fill in trial_ids list with an appropriate field saved in the database
trial_ids = ['testing', 'katiekatie', 'katiecc']  
# **TODO** Fill in getTrialData('Trials', 40, 'your pathway to TrialData_csv_name.csv', subjects, db)
getTrialData('Trials', 40, '/Users/katie/Documents/workspace/OnPoint-Music/Data/2trials_march162025.csv', trial_ids, db)

#addTrialData('Trials', 294, 'you_csv_name.csv', subjects, db)